Hilt 설정과 사용 핵심정리

  설정(Gradle)

  • 루트 플러그인 추가


   build.gradle lines 11-15

    11 │ dependencies {
    12 │     classpath 'com.android.tools.build:gradle:8.4.0'
    13 │     classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    14 │     classpath 'com.google.dagger:hilt-android-gradle-plugin:2.50'
    15 │ }

  • 앱/데이터 모듈 플러그인 적용 + 의존성


   app/build.gradle lines 1-7

     1 │ plugins {
     2 │     id 'com.android.application'
     3 │     id 'kotlin-android'
     4 │     id 'kotlin-kapt'
     5 │     id 'dagger.hilt.android.plugin'
     6 │     id 'org.jlleitschuh.gradle.ktlint'
     7 │ }


   app/build.gradle lines 91-93

    91 │ // Hilt dagger
    92 │ implementation "com.google.dagger:hilt-android:2.50"
    93 │ kapt "com.google.dagger:hilt-android-compiler:2.50"


   data/build.gradle lines 1-6

     1 │ plugins {
     2 │     id 'com.android.library'
     3 │     id 'org.jetbrains.kotlin.android'
     4 │     id 'kotlin-kapt'
     5 │     id 'dagger.hilt.android.plugin'
     6 │ }


   data/build.gradle lines 41-42

    41 │ implementation "com.google.dagger:hilt-android:2.50"
    42 │ kapt "com.google.dagger:hilt-android-compiler:2.50"

  • 도메인 모듈: Hilt 미사용, javax.inject만 사용


   domain/build.gradle lines 16-19

    16 │ dependencies {
    17 │     // domain은 순수 Kotlin 모듈로 유지
    18 │     implementation 'javax.inject:javax.inject:1'
    19 │ }


  애플리케이션 진입점

  • `@HiltAndroidApp`으로 Hilt 초기화


   app/src/main/java/com/lee/mymvvmsample/common/MyApplication.kt lines 6-8

     6 │ import dagger.hilt.android.HiltAndroidApp
     7 │ @HiltAndroidApp
     8 │ class MyApplication : Application() {


  안드로이드 진입점

  • `@AndroidEntryPoint`: Activity/Fragment


   app/src/main/java/com/lee/mymvvmsample/presentation/main/MainActivity.kt lines 21-24

    21 │ import dagger.hilt.android.AndroidEntryPoint
    22 │ @AndroidEntryPoint
    23 │ class MainActivity : BaseActivity(), NavigationView.OnNavigationItemSelectedListener {
    24 │     private val viewModel: MainViewModel by viewModels()


   app/src/main/java/com/lee/mymvvmsample/presentation/main/home/HomeFragment.kt lines 26-29

    26 │ import dagger.hilt.android.AndroidEntryPoint
    27 │ @AndroidEntryPoint
    28 │ class HomeFragment : Fragment(), OnClickHandler {
    29 │     private val viewModel: HomeViewModel by viewModels()


  ViewModel 주입

  • `@HiltViewModel` + `@Inject constructor`로 의존성 주입


   app/src/main/java/com/lee/mymvvmsample/presentation/viewmodel/HomeViewModel.kt lines 10-16

    10 │ import dagger.hilt.android.lifecycle.HiltViewModel
    11 │ @HiltViewModel
    12 │ class HomeViewModel
    13 │     @Inject
    14 │     constructor(
    15 │         private val searchImagesUseCase: SearchImagesUseCase,
    16 │     ) : BaseViewModel() {

  • 다른 뷰모델도 동일 패턴: MainViewModel, GalleryViewModel, ShareViewModel.


  모듈/바인딩

  • 앱 모듈(`SingletonComponent`): 인터페이스 구현 바인딩


   app/src/main/java/com/lee/mymvvmsample/common/di/AppModule.kt lines 13-23

    13 │ @Module
    14 │ @InstallIn(SingletonComponent::class)
    15 │ abstract class AppModule {
    16 │     @Binds
    17 │     @Singleton
    18 │     abstract fun bindCookieStorage(impl: CookieStorageImpl): CookieStorage
    19 │
    20 │     @Binds
    21 │     @Singleton
    22 │     abstract fun bindUserPreferences(impl: UserPreferencesImpl): UserPreferences
    23 │ }

  • 데이터 모듈: 리포지토리 바인딩 + 네트워크 제공


   data/src/main/java/com/lee/mymvvmsample/data/di/DataModule.kt lines 28-34

    28 │ @Module
    29 │ @InstallIn(SingletonComponent::class)
    30 │ abstract class RepositoryModule {
    31 │     @Binds
    32 │     @Singleton
    33 │     abstract fun bindImageRepository(imageRepositoryImpl: ImageRepositoryImpl): ImageRepository
    34 │ }


   data/src/main/java/com/lee/mymvvmsample/data/di/DataModule.kt lines 38-46

    38 │ @Module
    39 │ @InstallIn(SingletonComponent::class)
    40 │ object NetworkModule {
    41 │     @Provides
    42 │     fun provideOkHttpclient(cookieStorage: CookieStorage): OkHttpClient {
    43 │         return OkHttpClient.Builder().apply {
    44 │             // interceptors...
    45 │         }.build()
    46 │     }


   data/src/main/java/com/lee/mymvvmsample/data/di/DataModule.kt lines 71-80

    71 │     @Provides
    72 │     @Singleton
    73 │     fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit { /* ... */ }
    74 │
    75 │     @Provides
    76 │     @Singleton
    77 │     fun provideImageApiService(retrofit: Retrofit): ImageApiService {
    78 │         return retrofit.create(ImageApiService::class.java)
    79 │     }
    80 │ }

  • 참고: OkHttpClient 제공 메서드는 @Singleton이 붙어있지 않아 새 인스턴스가 될 수 있습니다. 싱글턴이 필요하면 @Singleton 추가를 고려할 수 있습니다.


  의존성 그래프

  • UI 레이어(액티비티/프래그먼트) → viewModels()로 Hilt 관리 VM 주입
  • VM → 도메인 유스케이스 주입(@Inject constructor)
  • 도메인 → 인터페이스 의존, 실제 구현은 데이터 모듈에서 @Binds
  • 데이터 → @Provides로 네트워크 구성, 인터셉터는 @Inject 생성자
  • - -
  • 앱과 데이터 모듈에 Hilt 플러그인/의존성 추가
  • MyApplication에 @HiltAndroidApp으로 초기화
  • Activity/Fragment는 @AndroidEntryPoint로 진입점 지정
  • ViewModel은 @HiltViewModel + @Inject constructor 사용
  • @Module/@InstallIn(SingletonComponent)로 인터페이스 바인딩과 네트워크 객체 제공
  • OkHttpClient만 비싱글턴 제공 상태임 (필요 시 @Singleton 권장)
